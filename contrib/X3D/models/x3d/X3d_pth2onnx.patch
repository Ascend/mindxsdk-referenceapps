1,13c1,18
< # Copyright 2021 Huawei Technologies Co., Ltd
< #
< # Licensed under the Apache License, Version 2.0 (the "License");
< # you may not use this file except in compliance with the License.
< # You may obtain a copy of the License at
< #
< #     http://www.apache.org/licenses/LICENSE-2.0
< #
< # Unless required by applicable law or agreed to in writing, software
< # distributed under the License is distributed on an "AS IS" BASIS,
< # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
< # See the License for the specific language governing permissions and
< # limitations under the License.
---
> #!/usr/bin/env python
> # coding=utf-8
> 
> """
> Copyright(C) Huawei Technologies Co.,Ltd. 2012-2022 All rights reserved.
> 
> Licensed under the Apache License, Version 2.0 (the "License");
> you may not use this file except in compliance with the License.
> You may obtain a copy of the License at
> 
>     http://www.apache.org/licenses/LICENSE-2.0
> 
> Unless required by applicable law or agreed to in writing, software
> distributed under the License is distributed on an "AS IS" BASIS,
> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
> See the License for the specific language governing permissions and
> limitations under the License.
> """
15d19
< import torch
17,21d20
< sys.path.append('slowfast')
< from slowfast.models import build_model
< from slowfast.utils import checkpoint as cu
< from slowfast.utils.parser import load_config, parse_args
< from slowfast.config.defaults import assert_and_infer_cfg
22a22,30
> from slowfast.config.defaults import assert_and_infer_cfg
> from slowfast.utils.parser import load_config, parse_args
> from slowfast.utils import checkpoint as cu
> from slowfast.models import build_model
> import torch
> import torch.nn as nn
> sys.path.append('slowfast')
> 
> 
24a33
> 
26a36,48
> 
>     class Tmodel(nn.Module):
>         def __init__(self, outer_model):
>             super(Tmodel, self).__init__()
>             self.outer_model = outer_model
> 
>         def forward(self, x):
>             x = x.unsqueeze(0)
>             # convert input shape 1x13x3x182x182 to is1x3x13x182x182
>             x = x.permute(0, 2, 1, 3, 4)
>             return self.outer_model([x])
> 
>     tmodel = Tmodel(model)
30,31c52,56
<     dummy_input = [torch.randn(16, 3, 13, 182, 182)]
<     torch.onnx.export(model, dummy_input, output_path, input_names = input_names, dynamic_axes = dynamic_axes, output_names = output_names, opset_version=11, verbose=True)
---
>     # input data shape is 13, 3, 182, 182
>     dummy_input = torch.randn(13, 3, 182, 182)
>     torch.onnx.export(tmodel, dummy_input, output_path, input_names=input_names,
>                       dynamic_axes=dynamic_axes, output_names=output_names, opset_version=11, verbose=True)
> 
37,40d61
< if __name__== '__main__':
<     args = parse_args()
<     cfg = load_config(args)
<     cfg = assert_and_infer_cfg(cfg)
42c63,67
<     launch_job(cfg=cfg, init_method=args.init_method, func=x3d_pth2onnx)
---
> if __name__ == '__main__':
>     args = parse_args()
>     config = load_config(args)
>     config = assert_and_infer_cfg(config)
>     launch_job(cfg=config, init_method=args.init_method, func=x3d_pth2onnx)
